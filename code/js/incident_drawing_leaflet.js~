var w = 960;
var h = 800;
var padding = 40;

// change what you would like data to equal for different geo projections
var data = incident;

// calculate the max and min of all the property values
var dollars = d3.extent(data.features, function(feature){
    return feature.properties['Assistance'];
});

// Render using d3
var color_scale = d3.scale.linear()
    .domain(dollars)
    .range(['white','red']);

// Copied from http://bost.ocks.org/mike/leaflet/ to draw a map using
// leaflet tiles, kinda excited to see this work
var map = new L.Map("map", {
    center: [41.836084,-87.63073],
    zoom: 9
})
    .addLayer(new L.TileLayer("http://{s}.tile.cloudmade.com/1101a43d23aa4bdba2652a34de0dcf62/998/256/{z}/{x}/{y}.png"));


var svg = d3.select(map.getPanes().overlayPane).append("svg");
var g = svg.append("g").attr("class", "leaflet-zoom-hide");

function project(x) {
    var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
    return [point.x, point.y];
}

var path = d3.geo.path().projection(project);
var bounds = d3.geo.bounds(data);

var feature = g.selectAll("path")
    .data(data.features)
    .enter().append("path");

reset();
map.on("viewreset", reset);

function reset(){
    var bottomLeft = project(bounds[0]),
    topRight = project(bounds[1]);
    svg.attr("width", topRight[0] - bottomLeft[0])
	.attr("height", bottomLeft[1] - topRight[1])
	.style("margin-left", bottomLeft[0] + "px")
	.style("margin-top", topRight[1] + "px");

    g.attr("transform", "translate(" + -bottomLeft[0] + "," 
	   + -topRight[1] + ")");
    feature.attr('fill', function(d){
	if (d.properties['Assistance'] === 0){
	    return "rgba(0,0,0,0)";
	}
	else{
	    return color_scale(d.properties['Assistance']);
	}
    })
	.attr('class',function (d){
	    if (d.properties['Assistance'] === 0){
		return "no_path";
	    }
	    else{
		return "normal_path"
	    }
	})
	.attr("d", path)
	.on("mouseover", function (d){
	    var title_text = "<h3>" + d.id + "</h3>";
	    _.each(d.properties, function(value, key){
		title_text += "<p>" + key + ": " + 
		    numberWithCommas(Math.round(value)) + "</p>";
	    });
	    var pos = $(this).offset();
	    
	    d3.select(this)
		.attr("class", function (d){
		    if (d.properties['Assistance'] === 0){
			return "no_path";
		    }
		    else{
			$("#tooltip").html(title_text)
			    .css({top: pos.top + 20, left: pos.left + 40})
			    .show();
			
			return "hover_path"
		    }
		});
	})
	
	.on("mouseout", function(d){
	    $("#tooltip").hide();
	    d3.select(this)
		.attr("class",function (d){
		    if (d.properties['Assistance'] === 0){
			return "no_path";
		    }
		    else{
			return "normal_path"
		    }
		})
		.attr("fill",function(d){
		    if (d.properties['Assistance'] === 0){
			return "rgba(0,0,0,0)";
		    }
		    else{
			return color_scale(d.properties['Assistance']);
		    }
		});
	});   
}


function numberWithCommas(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}